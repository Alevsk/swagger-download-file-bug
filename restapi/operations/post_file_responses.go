package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/robbert229/swagger-download-file-bug/models"
)

// HTTP code for type PostFileCreated
const PostFileCreatedCode int = 201

/*PostFileCreated The attachment has been uploaded.

swagger:response postFileCreated
*/
type PostFileCreated struct {
}

// NewPostFileCreated creates PostFileCreated with default headers values
func NewPostFileCreated() *PostFileCreated {
	return &PostFileCreated{}
}

// WriteResponse to the client
func (o *PostFileCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
}

/*PostFileDefault Unexpected error

swagger:response postFileDefault
*/
type PostFileDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostFileDefault creates PostFileDefault with default headers values
func NewPostFileDefault(code int) *PostFileDefault {
	if code <= 0 {
		code = 500
	}

	return &PostFileDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post file default response
func (o *PostFileDefault) WithStatusCode(code int) *PostFileDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post file default response
func (o *PostFileDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post file default response
func (o *PostFileDefault) WithPayload(payload *models.Error) *PostFileDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post file default response
func (o *PostFileDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostFileDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
